docker-name: omni-crm

include:
  # middleware
  - path: compose.d/rabbitmq/compose.yaml

  # databases
  - path: compose.d/postgres/compose.yaml

  # infrastructure systems
  - path: compose.d/mailcatcher/compose.yaml

  # applications
  - path: compose.d/backend/compose.yaml

services:
  # Общие настройки для сервисов

  # PHP API сервис с использованием php artisan serve
  api:
    image: php:8.4-cli-alpine
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
      - ./storage:/var/www/html/storage
    working_dir: /var/www/html
    # Устанавливаем необходимые расширения и утилиты для PHP
    command: >
      bash -c "apt-get update && 
               apt-get install -y libpq-dev libzip-dev zip unzip git && 
               docker-php-ext-install pdo pdo_pgsql zip && 
               if [ ! -f composer.phar ]; then curl -sS https://getcomposer.org/installer | php; fi && 
               php composer.phar install && 
               php artisan serve --host=0.0.0.0 --port=8000"
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - APP_ENV=${APP_ENV:-local}
      - PHP_MEMORY_LIMIT=512M
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8000 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - crm_network

  # Nginx - веб-сервер с проксированием запросов /api на PHP-сервис
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/templates:/etc/nginx/templates
      - ./public:/var/www/public
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - api
      - frontend
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - API_HOST=api
      - API_PORT=8000
    networks:
      - crm_network

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - crm_network

  # Elasticsearch для поиска
  elasticsearch:
    image: elasticsearch:8.10.2
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    healthcheck:
      test: curl --silent --fail localhost:9200/_cluster/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - crm_network

  # Node для фронтенда
  frontend:
    build:
      context: ./
      dockerfile: docker/node/Dockerfile
    volumes:
      - ./:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    command: npm run dev
    networks:
      - crm_network

volumes:
  redis_data:
  elasticsearch_data:

networks:
  crm_network:
    driver: bridge
