openapi: 3.0.3
info:
  title: CRM API
  version: 1.0.0
  description: |
    OpenAPI спецификация для CRM системы.

    Legal Entity эндпоинты:
    - POST /api/legal-entities — создание
    - GET /api/legal-entities/{uid} — получение по UID
    - GET /api/legal-entities — список с фильтрацией

    Individual эндпоинты:
    - POST /api/individuals — создание
    - GET /api/individuals/{uid} — получение по UID
    - GET /api/individuals — список с фильтрацией
servers:
  - url: https://nginx
    description: Base path
tags:
  - name: Legal Entity
    description: Управление юридическими лицами
  - name: Individual
    description: Управление физическими лицами
  - name: Product
    description: Управление продуктами и услугами
  - name: Equipment
    description: Управление оборудованием
paths:
  /api/individuals:
    get:
      tags: [Individual]
      summary: Получить список физических лиц
      description: Получает список всех физических лиц с возможностью фильтрации
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по имени, фамилии или отчеству
        - in: query
          name: status
          schema:
            type: string
            enum: [active, archived]
          description: Фильтр по статусу
        - in: query
          name: is_company_employee
          schema:
            type: boolean
          description: Фильтр по сотрудникам компании
      responses:
        '200':
          description: Список физических лиц
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IndividualListItem'
    post:
      tags: [Individual]
      summary: Создать физическое лицо
      description: Создает новое физическое лицо в системе
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndividualRequest'
            examples:
              default:
                value:
                  first_name: Иван
                  last_name: Иванов
                  middle_name: Иванович
                  status: active
                  position_id: 1
                  login: ivan123
                  is_company_employee: false
      responses:
        '201':
          description: Физическое лицо успешно создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Физическое лицо успешно создано
                  data:
                    $ref: '#/components/schemas/Individual'
        '400':
          description: Ошибка создания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Ошибка валидации
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
  /api/individuals/{uid}:
    get:
      tags: [Individual]
      summary: Получить физическое лицо
      description: Получает данные физического лица по UID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
            format: uuid
          description: UID физического лица
      responses:
        '200':
          description: Данные физического лица
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/Individual'
        '404':
          description: Физическое лицо не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/legal-entities:
    get:
      tags: [Legal Entity]
      summary: Список юридических лиц
      parameters:
        - in: query
          name: shortName
          schema:
            type: string
          description: Фильтр по краткому наименованию (LIKE)
        - in: query
          name: inn
          schema:
            type: string
            pattern: '^\d{10}$'
          description: Фильтр по ИНН (точное совпадение)
        - in: query
          name: phoneNumber
          schema:
            type: string
          description: Фильтр по номеру телефона (LIKE)
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Фильтр по email (LIKE)
        - in: query
          name: curatorUid
          schema:
            type: string
            format: uuid
          description: Фильтр по UID куратора
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LegalEntityListItem'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/equipment:
    get:
      tags: [Equipment]
      summary: Список оборудования
      parameters:
        - in: query
          name: uid
          schema:
            type: string
            format: uuid
          description: Фильтр по UID
        - in: query
          name: name
          schema:
            type: string
          description: Фильтр по наименованию (LIKE)
        - in: query
          name: status
          schema:
            type: string
            enum: [warehouse, issued, installed, sold, reclamation, util, customer]
          description: Фильтр по статусу
        - in: query
          name: transportUid
          schema:
            type: string
            format: uuid
          description: Фильтр по UID транспорта
        - in: query
          name: warehouse
          schema:
            type: string
          description: Фильтр по складу (точное совпадение)
        - in: query
          name: issuedToUid
          schema:
            type: string
            format: uuid
          description: Фильтр по UID получателя (физлицо)
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentListItem'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/equipment/{uid}:
    get:
      tags: [Equipment]
      summary: Получить оборудование по UID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        '400':
          description: Некорректный UID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/products:
    get:
      tags: [Product]
      summary: Список продуктов
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Фильтр по наименованию (LIKE)
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
          description: Фильтр по состоянию
        - in: query
          name: type
          schema:
            type: string
            enum: [item, service]
          description: Фильтр по типу
        - in: query
          name: unit
          schema:
            type: string
          description: Фильтр по единице измерения (точное совпадение)
        - in: query
          name: group
          schema:
            type: string
          description: Фильтр по группе
        - in: query
          name: subgroup
          schema:
            type: string
          description: Фильтр по подгруппе
        - in: query
          name: code1c
          schema:
            type: string
          description: Фильтр по коду 1С
        - in: query
          name: sku
          schema:
            type: string
          description: Фильтр по артикулу (SKU)
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductListItem'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Product]
      summary: Создать продукт
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
            examples:
              default:
                value:
                  name: GPS-трекер
                  status: active
                  type: item
                  unit: шт.
                  sku: GPS-123
                  groupName: Оборудование
                  subgroupName: Трекеры
                  code1c: 'A1B2C3'
                  salePrice: '5990.00'
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    format: uuid
                required: [uid]
        '400':
          description: Ошибка валидации/бизнес-правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/products/{uid}:
    get:
      tags: [Product]
      summary: Получить продукт по UID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Некорректный UID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Legal Entity]
      summary: Создать юридическое лицо
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLegalEntityRequest'
            examples:
              default:
                value:
                  shortName: KVS
                  fullName: KVS Systems LLC
                  ogrn: '1234567890123'
                  inn: '1234567890'
                  kpp: '123456789'
                  legalAddress: Saint-Petersburg
                  phoneNumber: '+78120000000'
                  email: office@example.com
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    format: uuid
                required: [uid]
        '400':
          description: Ошибка валидации/бизнес-правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/legal-entities/{uid}:
    get:
      tags: [Legal Entity]
      summary: Получить юридическое лицо по UID
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntity'
        '400':
          description: Некорректный UID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    CreateLegalEntityRequest:
      type: object
      properties:
        shortName:
          type: string
          minLength: 1
          maxLength: 20
          description: Краткое наименование
        fullName:
          type: string
          minLength: 1
          maxLength: 255
          description: Полное наименование
        ogrn:
          type: string
          pattern: '^\d{13}$'
          description: ОГРН (13 цифр)
        inn:
          type: string
          pattern: '^\d{10}$'
          description: ИНН (10 цифр)
        kpp:
          type: string
          pattern: '^\d{9}$'
          description: КПП (9 цифр)
        legalAddress:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        creatorUid:
          type: string
          format: uuid
          nullable: true
      required: [shortName, fullName, ogrn, inn, kpp]
    LegalEntityListItem:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        shortName:
          type: string
        fullName:
          type: string
        inn:
          type: string
        phoneNumber:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
          example: '2025-08-28 12:34:56'
        creatorUid:
          type: string
          format: uuid
          nullable: true
        curatorUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, shortName, fullName, inn, createdAt]
    LegalEntity:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        shortName:
          type: string
        fullName:
          type: string
        ogrn:
          type: string
        inn:
          type: string
        kpp:
          type: string
        legalAddress:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
          example: '2025-08-28 12:34:56'
        creatorUid:
          type: string
          format: uuid
          nullable: true
        curatorUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, shortName, fullName, ogrn, inn, kpp, createdAt]
    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Наименование
        status:
          type: string
          enum: [active, inactive]
          description: Состояние
        type:
          type: string
          enum: [item, service]
          description: Тип
        unit:
          type: string
          minLength: 1
          maxLength: 20
          description: Единица измерения
        sku:
          type: string
          minLength: 1
          maxLength: 50
          description: Артикул
        groupName:
          type: string
          maxLength: 50
          nullable: true
        subgroupName:
          type: string
          maxLength: 50
          nullable: true
        code1c:
          type: string
          maxLength: 50
          nullable: true
        salePrice:
          type: string
          pattern: '^\d+\.?\d{0,2}$'
          nullable: true
        creatorUid:
          type: string
          format: uuid
          nullable: true
      required: [name, status, type, unit, sku]
    ProductListItem:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        type:
          type: string
        unit:
          type: string
        groupName:
          type: string
          nullable: true
        subgroupName:
          type: string
          nullable: true
        code1c:
          type: string
          nullable: true
        sku:
          type: string
        salePrice:
          type: string
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
        creatorUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, name, status, type, unit]
    Product:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
        type:
          type: string
        unit:
          type: string
        groupName:
          type: string
          nullable: true
        subgroupName:
          type: string
          nullable: true
        code1c:
          type: string
          nullable: true
        sku:
          type: string
        salePrice:
          type: string
          nullable: true
        avgPurchaseCostYear:
          type: string
          nullable: true
        lastPurchaseCost:
          type: string
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
        creatorUid:
          type: string
          format: uuid
          nullable: true
        updatedAt:
          type: string
          nullable: true
        updatedByUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, name, status, type, unit, createdAt]
    EquipmentListItem:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [warehouse, issued, installed, sold, reclamation, util, customer]
        transportUid:
          type: string
          format: uuid
          nullable: true
        warehouse:
          type: string
          nullable: true
        issuedToUid:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
        creatorUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, name, status, createdAt]
    Equipment:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [warehouse, issued, installed, sold, reclamation, util, customer]
        previousStatus:
          type: string
          enum: [warehouse, issued, installed, sold, reclamation, util, customer]
          nullable: true
        purchaseInvoiceUid:
          type: string
          format: uuid
          nullable: true
        supplierUid:
          type: string
          format: uuid
          nullable: true
        warehouse:
          type: string
          nullable: true
        issuedToUid:
          type: string
          format: uuid
          nullable: true
        issueDocUid:
          type: string
          format: uuid
          nullable: true
        transportUid:
          type: string
          format: uuid
          nullable: true
        mountingDate:
          type: string
          format: date
          nullable: true
        shipmentInvoiceUid:
          type: string
          format: uuid
          nullable: true
        customerUid:
          type: string
          format: uuid
          nullable: true
        skziFrom:
          type: string
          format: date
          nullable: true
        skziTo:
          type: string
          format: date
          nullable: true
        createdAt:
          type: string
          description: 'Формат: YYYY-MM-DD HH:MM:SS'
        creatorUid:
          type: string
          format: uuid
          nullable: true
        updatedAt:
          type: string
          nullable: true
        updatedByUid:
          type: string
          format: uuid
          nullable: true
      required: [uid, name, status, createdAt]
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required: [error]
    CreateIndividualRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          maxLength: 20
          description: Имя
        last_name:
          type: string
          minLength: 1
          maxLength: 20
          description: Фамилия
        middle_name:
          type: string
          minLength: 1
          maxLength: 20
          description: Отчество
        status:
          type: string
          enum: [active, archived]
          description: Статус
        position_id:
          type: integer
          minimum: 1
          nullable: true
          description: ID должности
        login:
          type: string
          minLength: 6
          nullable: true
          description: Логин
        is_company_employee:
          type: boolean
          description: Сотрудник компании
        creator_uid:
          type: string
          format: uuid
          nullable: true
      required: [first_name, last_name, middle_name, status]
    IndividualListItem:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        full_name:
          type: string
          description: ФИО полностью
        short_name:
          type: string
          description: ФИО кратко
        status:
          type: string
        position_id:
          type: integer
          nullable: true
        login:
          type: string
          nullable: true
        is_company_employee:
          type: boolean
        creator_uid:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
      required: [uid, first_name, last_name, middle_name, status, is_company_employee, created_at]
    Individual:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        full_name:
          type: string
          description: ФИО полностью
        short_name:
          type: string
          description: ФИО кратко
        status:
          type: string
        position_id:
          type: integer
          nullable: true
        login:
          type: string
          nullable: true
        is_company_employee:
          type: boolean
        creator_uid:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
      required: [uid, first_name, last_name, middle_name, status, is_company_employee, created_at]
